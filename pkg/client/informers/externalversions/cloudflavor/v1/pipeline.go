/*
Copyright 2018 Victor Palade.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by informer-gen

package v1

import (
	cloudflavor_io_v1 "github.com/pi-victor/pipelines/pkg/apis/cloudflavor.io/v1"
	versioned "github.com/pi-victor/pipelines/pkg/client/clientset/versioned"
	internalinterfaces "github.com/pi-victor/pipelines/pkg/client/informers/externalversions/internalinterfaces"
	v1 "github.com/pi-victor/pipelines/pkg/client/listers/cloudflavor/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// PipelineInformer provides access to a shared informer and lister for
// Pipelines.
type PipelineInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.PipelineLister
}

type pipelineInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewPipelineInformer constructs a new informer for Pipeline type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPipelineInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.CloudflavorV1().Pipelines(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.CloudflavorV1().Pipelines(namespace).Watch(options)
			},
		},
		&cloudflavor_io_v1.Pipeline{},
		resyncPeriod,
		indexers,
	)
}

func defaultPipelineInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewPipelineInformer(client, meta_v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *pipelineInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&cloudflavor_io_v1.Pipeline{}, defaultPipelineInformer)
}

func (f *pipelineInformer) Lister() v1.PipelineLister {
	return v1.NewPipelineLister(f.Informer().GetIndexer())
}
